service: student-portal-api
frameworkVersion: '3'
useDotenv: true

custom:
  tableName: 'students-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-south-1
  httpApi:
    cors: true
    authorizers:
      studentportalauth:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/${env:USERPOOL_ID}
        audience:
          - ${env:CLIENT_ID}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ StudentsTable, Arn ]
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource:
            - Fn::GetAtt: [ CognitoUserPool, Arn ]
  environment:
    STUDENTS_TABLE: ${self:custom.tableName}
    USERPOOL_ID: !Ref CognitoUserPool

functions:
  api:
    handler: handler.handler
    events:
      - httpApi:
          method: get
          path: /{any+}
          authorizer:
            name: studentportalauth
      - httpApi:
          method: post
          path: /{any+}
          authorizer:
            name: studentportalauth
          
      
resources:
  Resources:
    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: studentID
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: studentID
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: student-portal-user-pool-${sls:stage}
        AliasAttributes:
          - email
          - phone_number
        AutoVerifiedAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: departmentNo
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: classNo
            AttributeDataType: String
            Required: false
            Mutable: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        EmailConfiguration:
          EmailSendingAccount: 'COGNITO_DEFAULT'
    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: "superadmin"
        UserPoolId: { Ref: CognitoUserPool }
    FacultyGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: "faculty"
        UserPoolId: { Ref: CognitoUserPool }
    StudentGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: "student"
        UserPoolId: { Ref: CognitoUserPool }
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        ClientName: "react"
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: UserPoolId-${sls:stage}
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: UserPoolClientId-${sls:stage}